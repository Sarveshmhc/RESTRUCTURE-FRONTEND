/* Enhanced Sidebar tooltip - Compact version */

:root {
  /* tooltip tokens - light UI should use a dark tooltip for readability */
  --tt-bg-light: #002678;     /* dark tooltip on light UI */
  --tt-text-light: #ffffff;
  --tt-border-light: rgba(0, 0, 0, 0.06);

  /* tooltip tokens for dark UI */
  --tt-bg-dark: rgba(0, 29, 159, 0.95);
  --tt-text-dark: #f1f5f9;
  --tt-border-dark: rgba(255,255,255,0.06);

  --tt-radius: 8px;
  --tt-shadow: 0 8px 24px rgba(2,6,23,0.12);
  --tt-z: 99999;
  --tt-arrow-size: 10px;
  --tt-gap: 8px;
}

/* wrapper around trigger -> make it the positioning root */
.wrap {
  position: relative;
  display: inline-block; /* inline so header icons don't force extra width */
  overflow: visible !important;
}

/* Tooltip base: shrink-to-fit and single-line */
.tip {
  position: fixed;
  overflow: visible;
  background: var(--tooltip-bg);
  color: var(--tooltip-text);
  border: 1px solid var(--tooltip-border);
  box-shadow: var(--tooltip-shadow);
  border-radius: var(--tooltip-radius);
  padding: 6px 10px;
  font-size: var(--tt-font-size, var(--tooltip-font-size));
  z-index: var(--z-tooltip);
  white-space: nowrap;             /* keep single line so width = text width */
}

/* Right-placement: tooltip sits to the right of trigger and arrow points left */
.right {
  transform-origin: left center;
}
.right .arrow {
  position: absolute;
  width: var(--tt-arrow-size);
  height: var(--tt-arrow-size);
  /* place arrow flush to left edge (half outside) */
  left: calc(-1 * (var(--tt-arrow-size) / 2));
  top: 50%;
  transform: translateY(-50%) rotate(45deg);
  background: var(--tooltip-bg);
  border: 1px solid var(--tooltip-border);
  pointer-events: none;
  z-index: 0;
  border-radius: 1px;
}

/* Left-placement mirror (arrow on right edge) */
.left .arrow {
  left: auto;
  right: calc(-1 * (var(--tt-arrow-size) / 2));
  top: 50%;
  transform: translateY(-50%) rotate(45deg);
}

/* Keep top/bottom centered arrow unchanged */
.top .arrow, .bottom .arrow {
  left: 50%;
  transform: translateX(-50%) rotate(45deg);
}

/* Ensure content size matches text (no extra horizontal padding forcing extra space) */
.content {
  display: inline-block;
  line-height: 1;
  white-space: nowrap;
  padding: 0; /* rely on .tip padding for spacing */
}

/* visible state */
.tip.visible {
  opacity: 1;
  visibility: visible;
  pointer-events: auto;
}

/* base arrow (keeps size/appearance only) */
.arrow {
  position: absolute;
  width: var(--tt-arrow-size);
  height: var(--tt-arrow-size);
  background: var(--tooltip-bg);
  border: 1px solid var(--tooltip-border);
  transform: rotate(45deg);
  pointer-events: none;
  box-shadow: none;
}

/* RIGHT placement: tooltip to the right of sidebar item.
   Arrow placed on LEFT edge and vertically centered, half outside tip */
.tip.right .arrow,
.tip[data-origin="sidebar"].right .arrow {
  left: calc(-1 * (var(--tt-arrow-size) / 2));
  top: 50%;
  transform: translateY(-50%) rotate(45deg);
  z-index: 0;
  border-color: currentColor;
}

/* BOTTOM placement (header): tooltip below icon, arrow centered at TOP pointing up */
.tip.bottom .arrow,
.tip[data-origin="header"].bottom .arrow {
  left: 50%;
  top: calc(-1 * (var(--tt-arrow-size) / 2));
  transform: translateX(-50%) rotate(45deg);
  z-index: 0;
  border-color: currentColor;
}

/* TOP placement (tooltip above trigger): arrow centered at bottom pointing down */
.tip.top .arrow {
  left: 50%;
  top: auto;
  bottom: calc(-1 * (var(--tt-arrow-size) / 2));
  transform: translateX(-50%) rotate(45deg);
  z-index: 0;
  border-color: currentColor;
}

/* LEFT placement: arrow on RIGHT edge */
.tip.left .arrow {
  right: calc(-1 * (var(--tt-arrow-size) / 2));
  left: auto;
  top: 50%;
  transform: translateY(-50%) rotate(45deg);
  z-index: 0;
  border-color: currentColor;
}

/* Theme-aware arrow/background (inherit from tip background) */
:root .tip,
[data-theme="light"] .tip {
  background: var(--tt-bg-light);
  color: var(--tt-text-light);
  border-color: var(--tt-border-light);
}
[data-theme="dark"] .tip {
  background: var(--tt-bg-dark);
  color: var(--tt-text-dark);
  border-color: var(--tt-border-dark);
}

/* ensure arrow inherits the same visuals */
:root .tip .arrow,
[data-theme="light"] .tip .arrow {
  background: var(--tt-bg-light);
  border-color: var(--tt-border-light);
}
[data-theme="dark"] .tip .arrow {
  background: var(--tt-bg-dark);
  border-color: var(--tt-border-dark);
}

/* make sure header-specific styling no longer relies on DOM nesting (we use data-origin now) */
.tip[data-origin="header"] {
  /* keep centered min-width for header usage */
  min-width: 120px;
}

/* Defensive: avoid glass or inherited backgrounds from header children */
.headerBar .tip,
.headerBar .tip * {
  -webkit-backdrop-filter: none !important;
  backdrop-filter: none !important;
  background-image: none !important;
}

/* Accessibility: reduce motion pref */
@media (prefers-reduced-motion: reduce) {
  .tip { transition: none; }
}

/* Responsive: hide on small screens if desired (keep optional) */
@media (max-width: 520px) {
  .tip { display: none !important; }
}

/* Ensure arrow does not add extra horizontal space */
.right .arrow { margin-left: 0; }
/* hide unwanted text (replace .selector with the real selector from DevTools) */
.selector {
  display: none !important;
}

.tip {
  position: fixed;
  overflow: visible;
  background: var(--tooltip-bg);
  color: var(--tooltip-text);
  border: 1px solid var(--tooltip-border);
  box-shadow: var(--tooltip-shadow);
  border-radius: var(--tooltip-radius);
  padding: 6px 10px;
  font-size: var(--tt-font-size, var(--tooltip-font-size));
  z-index: var(--z-tooltip);
  white-space: nowrap;
}

/* Arrow (diamond) */
.arrow {
  position: absolute;
  width: var(--tt-arrow-size);
  height: var(--tt-arrow-size);
  background: var(--tooltip-bg);
  border: 1px solid var(--tooltip-border);
  transform: rotate(45deg);
  pointer-events: none;
  box-shadow: none;
}

/* Right placement: arrow on left edge, vertically centered */
.tip.right .arrow {
  left: calc(-1 * (var(--tt-arrow-size) / 2));
  top: 50%;
  transform: translateY(-50%) rotate(45deg);
}

/* Bottom placement (header): arrow centered at top */
.tip.bottom .arrow {
  left: 50%;
  top: calc(-1 * (var(--tt-arrow-size) / 2));
  transform: translateX(-50%) rotate(45deg);
}

/* Top placement: arrow centered at bottom */
.tip.top .arrow {
  left: 50%;
  bottom: calc(-1 * (var(--tt-arrow-size) / 2));
  transform: translateX(-50%) rotate(45deg);
}

/* Left placement: arrow on right edge */
.tip.left .arrow {
  right: calc(-1 * (var(--tt-arrow-size) / 2));
  top: 50%;
  transform: translateY(-50%) rotate(45deg);
}

/* visible state */
.visible {
  opacity: 1;
  pointer-events: auto;
}
.tip { opacity: 0; pointer-events: none; transition: opacity 140ms ease; }

/* === Placement specific arrows === */

/* Tooltip on the RIGHT of element (arrow points LEFT) */
.right .arrow {
  left: -4px;             /* shift arrow outside the tooltip box */
  top: 50%;
  transform: translateY(-50%) rotate(45deg);
}

/* Tooltip on the LEFT of element (arrow points RIGHT) */
.left .arrow {
  right: -4px;
  top: 50%;
  transform: translateY(-50%) rotate(45deg);
}

/* Tooltip on TOP of element (arrow points DOWN) */
.top .arrow {
  bottom: -4px;
  left: 50%;
  transform: translateX(-50%) rotate(45deg);
}

/* Tooltip on BOTTOM of element (arrow points UP) */
.bottom .arrow {
  top: -4px;
  left: 50%;
  transform: translateX(-50%) rotate(45deg);
}

/* ensure tooltip can show arrow outside the box */
.tip {
  overflow: visible !important;
  position: absolute;
  display: inline-block;
  width: auto !important;
  min-width: 0 !important;
  white-space: nowrap;
  padding: 6px 10px;
  border-radius: var(--tooltip-radius, 8px);
}

/* arrow base */
.arrow {
  position: absolute;
  width: var(--tt-arrow-size, 10px);
  height: var(--tt-arrow-size, 10px);
  background: inherit;
  border: 1px solid var(--tooltip-border, rgba(255,253,253,0.06));
  pointer-events: none;
  transform: rotate(45deg);
  border-radius: 1px;
  z-index: 0;
  box-shadow: none;
}

/* RIGHT placement — tooltip to the right of the trigger.
   Arrow sits on the LEFT edge and vertically centers to point at the sidebar icon. */
.tip.right .arrow {
  left: calc(-1 * (var(--tt-arrow-size, 10px) / 2)) !important;
  top: 50% !important;
  transform: translateY(-50%) rotate(45deg) !important;
  border-color: currentColor !important;
}

/* BOTTOM placement (header icons) — arrow centered at top pointing up */
.tip.bottom .arrow {
  left: 50% !important;
  top: calc(-1 * (var(--tt-arrow-size, 10px) / 2)) !important;
  transform: translateX(-50%) rotate(45deg) !important;
}

/* TOP placement — arrow centered at bottom pointing down */
.tip.top .arrow {
  left: 50% !important;
  top: auto !important;
  bottom: calc(-1 * (var(--tt-arrow-size, 10px) / 2)) !important;
  transform: translateX(-50%) rotate(45deg) !important;
}

/* Force arrow on left edge for right-placed tooltips (highest specificity + !important) */
span.tip.right > .arrow,
span.tip[data-placement="right"] > .arrow,
.tip.right .arrow {
  left: calc(-1 * (var(--tt-arrow-size, 10px) / 2)) !important;
  right: auto !important;
  top: 50% !important;
  bottom: auto !important;
  transform: translateY(-50%) rotate(45deg) !important;
  /* ensure it sits visually outside the box */
  margin-left: 0 !important;
  z-index: 0 !important;
}

/* Defensive: prevent other rules from moving the arrow to top */
span.tip.bottom > .arrow,
.tip.bottom .arrow {
  /* keep bottom placement unchanged only when bottom is intended */
  /* no-op here; explicit top-centering handled elsewhere */
}

/* Strong overrides using data-placement (JS sets data-placement) */
.tip {
  position: fixed !important; /* render outside sidebar/header and avoid clipping */
  overflow: visible !important;
}

/* RIGHT (sidebar) -> arrow on LEFT edge, vertically centered */
.tip[data-placement="right"] {
  transform-origin: left center !important;
}
.tip[data-placement="right"] .arrow {
  left: calc(-1 * (var(--tt-arrow-size, 10px) / 2)) !important;
  right: auto !important;
  top: 50% !important;
  bottom: auto !important;
  transform: translateY(-50%) rotate(45deg) !important;
  margin: 0 !important;
}

/* BOTTOM (header) -> arrow at TOP center pointing up */
.tip[data-placement="bottom"] .arrow {
  left: 50% !important;
  top: calc(-1 * (var(--tt-arrow-size, 10px) / 2)) !important;
  transform: translateX(-50%) rotate(45deg) !important;
  margin: 0 !important;
}

/* LEFT -> arrow on RIGHT edge */
.tip[data-placement="left"] .arrow {
  right: calc(-1 * (var(--tt-arrow-size, 10px) / 2)) !important;
  left: auto !important;
  top: 50% !important;
  transform: translateY(-50%) rotate(45deg) !important;
  margin: 0 !important;
}

/* TOP -> arrow at BOTTOM center pointing down */
.tip[data-placement="top"] .arrow {
  left: 50% !important;
  bottom: calc(-1 * (var(--tt-arrow-size, 10px) / 2)) !important;
  top: auto !important;
  transform: translateX(-50%) rotate(45deg) !important;
  margin: 0 !important;
}

/* ensure tooltip is rendered above sidebar/header and outside their stacking contexts */
.tip {
  position: fixed !important;       /* force fixed so it's always relative to viewport */
  z-index: 100000 !important;       /* ensure above sidebar (sidebar uses --z-sidebar) */
  overflow: visible !important;
}

/* RIGHT placement -> arrow on LEFT edge, and ensure box sits fully outside */
.tip[data-placement="right"] {
  transform-origin: left center !important;
}
.tip[data-placement="right"] .arrow {
  left: calc(-1 * (var(--tt-arrow-size, 10px) / 2)) !important;
  top: 50% !important;
  transform: translateY(-50%) rotate(45deg) !important;
}

/* BOTTOM placement -> arrow centered at top (for header icons) */
.tip[data-placement="bottom"] .arrow {
  left: 50% !important;
  top: calc(-1 * (var(--tt-arrow-size, 10px) / 2)) !important;
  transform: translateX(-50%) rotate(45deg) !important;
}

/* Defensive: ensure tooltip box doesn't get clipped by transforms/overflow on parents */
.portal {
  position: static; /* portal container stays a plain body child */
}

/* ===== Header tooltip: force outside, centered, arrow at top-center ===== */

/* Ensure tooltip is always viewport-fixed and above header/sidebar */
.tip {
  position: fixed !important;
  z-index: 100000 !important;
  overflow: visible !important;
}

/* For header triggers we compute placement="bottom" in JS.
   Make the tooltip centered under the trigger and arrow at top center. */
.tip[data-placement="bottom"],
.tip[data-origin="header"] {
  transform-origin: top center !important;
  /* optional minimum width for header tooltips so text doesn't wrap awkwardly */
  min-width: 120px;
  padding: 8px 14px;
  background: var(--tooltip-bg);
  color: var(--tooltip-text);
  border: 1px solid var(--tooltip-border);
  box-shadow: var(--tooltip-shadow);
  border-radius: var(--tooltip-radius);
  font-size: var(--tt-font-size);
}

/* Center the arrow at the top edge for header tooltips */
.tip[data-placement="bottom"] .arrow,
.tip[data-origin="header"] .arrow {
  left: 50% !important;
  top: calc(-1 * (var(--tt-arrow-size, 10px) / 2)) !important;
  transform: translateX(-50%) rotate(45deg) !important;
  /* make sure arrow inherits same background/border to avoid artifact */
  background: inherit !important;
  border-color: inherit !important;
  box-shadow: none !important;
  pointer-events: none !important;
}

/* Slight vertical spacing correction so the arrow visually points at the icon.
   Adjust the gap value here if you need it closer/farther. */
.tip[data-placement="bottom"] {
  margin-top: 4px !important; /* small visual offset if needed */
}

/* Defensive: if any other rule forces arrow to top-left, override it */
.tip .arrow {
  width: var(--tt-arrow-size, 10px) !important;
  height: var(--tt-arrow-size, 10px) !important;
}

/* tooltip box uses global tokens */
.tip {
  position: fixed !important;
  z-index: var(--z-tooltip, 100000) !important;
  overflow: visible !important;

  background: var(--tooltip-bg) !important;
  color: var(--tooltip-text) !important;
  border: 1px solid var(--tooltip-border) !important;
  box-shadow: var(--tooltip-shadow) !important;
  border-radius: var(--tooltip-radius) !important;
  padding: 6px 12px !important;
  font-size: var(--tt-font-size, 13px);
  white-space: nowrap;
  transition: opacity 140ms ease;
}

/* arrow/diamond inherits arrow tokens (keeps it visually consistent) */
.arrow {
  position: absolute !important;
  width: var(--tt-arrow-size) !important;
  height: var(--tt-arrow-size) !important;
  background: var(--tooltip-arrow-bg) !important;
  border: 1px solid var(--tooltip-arrow-border) !important;
  transform: rotate(45deg) !important;
  pointer-events: none !important;
  box-shadow: none !important;
}

/* placement-aware arrow positioning (examples kept) */
.tip[data-placement="right"] .arrow {
  left: calc(-1 * (var(--tt-arrow-size) / 2)) !important;
  top: 50% !important;
  transform: translateY(-50%) rotate(45deg) !important;
}
.tip[data-placement="bottom"] .arrow {
  left: 50% !important;
  top: calc(-1 * (var(--tt-arrow-size) / 2)) !important;
  transform: translateX(-50%) rotate(45deg) !important;
}

/* visible state */
.tip { opacity: 0; pointer-events: none; }
.tip.visible { opacity: 1; pointer-events: auto; }

